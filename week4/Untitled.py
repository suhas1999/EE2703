

from math import *
import numpy as np
import matplotlib.pyplot as plt

def exp(x):
    return np.exp(x)

def cos_cos(x):
    return np.cos(np.cos(x))

def make_periodic(x):
    def exp(x):
        return np.exp(x)
    return exp(np.remainder(x,2*pi))


# In[6]:

import pylab
# In[7]:


pylab.rcParams['figure.figsize'] = [20,15]
figure,ax = plt.subplots(3)
x = np.linspace(-2,4,601)
x = x*pi
ax[0].grid(True)
ax[1].grid(True)
ax[2].grid(True)
ax[0].set_title(r"$original\ exp(x)$",size=14)
ax[1].set_title(r"$Periodic\ exp(x)$",size=14)
ax[2].set_title(r"$cos(cos(x))$",size=14)
plt.xlabel(r"$x$",size=14)
ax[0].semilogy(x,exp(x))
ax[1].semilogy(x,make_periodic(x))
ax[2].plot(x,cos_cos(x))
plt.show()

# In[8]:


#Here exp(x) is not periodic.
#If we use the formula of fourier series we will get exp(y) where y is x mod 2pi 


# In[9]:


#Fourier series assumes the function to be periodic,Hence the function generated by fourier series is periodic(exp(x)) which is shown in the second figure


# In[10]:


#since cos(cos(x)) is periodic the function generated by fourier series is cos(Cos(x))


# In[11]:


def cos_u(x,k,f):
    return f(x)*np.cos(k*x)


# In[12]:


def sin_u(x,k,f):
    return f(x)*np.sin(k*x)


# In[13]:


from scipy import integrate as integrate
a_exp=np.empty((26,1))
b_exp=np.empty((25,1))


# In[14]:


a_exp[0] = np.array(integrate.quad(cos_u,0,2*pi,args=(0,make_periodic))[0])/2*pi


# In[15]:


for k in range(1,26):
    a_exp[k]= np.array(integrate.quad(cos_u,0,2*pi,args=(k,make_periodic))[0])/pi


# In[16]:


for k in range(1,26):
    b_exp[k-1]=np.array(integrate.quad(sin_u,0,2*pi,args=(k,make_periodic))[0])/pi


# In[17]:


a_cos_cos=np.empty((26,1))
b_cos_cos=np.empty((25,1))


# In[18]:


a_cos_cos[0] = np.array(integrate.quad(cos_u,0,2*pi,args=(0,cos_cos))[0])/2*pi


# In[19]:


for k in range(1,26):
    a_cos_cos[k]= np.array(integrate.quad(cos_u,0,2*pi,args=(k,cos_cos))[0])/pi


# In[20]:


for k in range(1,26):
    b_cos_cos[k-1]=np.array(integrate.quad(sin_u,0,2*pi,args=(k,cos_cos))[0])/pi


# In[21]:


b_cos_cos


# In[22]:


#observe that approx zero


# In[23]:


exp_coff = np.empty((51,1))
cos_cos_coff = np.empty((51,1))


# In[24]:


for i in range(51):
    if i%2==0:
        temp = i//2
        exp_coff[i] = a_exp[temp]
    else:
        temp = (i-1)//2
        exp_coff[i] = b_exp[temp]


# In[25]:


for i in range(51):
    if i%2==0:
        temp = i//2
        cos_cos_coff[i] = a_cos_cos[temp]
    else:
        temp = (i-1)//2
        cos_cos_coff[i] = b_cos_cos[temp]


# In[26]:


exp_straight_coff = np.concatenate([a_exp, b_exp])
cos_cos_straight_coff = np.concatenate([a_cos_cos,b_cos_cos])


# In[27]:


pylab.rcParams['figure.figsize'] = [20,15]
figure,bx = plt.subplots(4)
x= np.linspace(0,25,26)
bx[0].grid(True)
bx[1].grid(True)
bx[2].grid(True)
bx[3].grid(True)
bx[0].set_title(r"$cos\ coefficients\ semilogy\ plot\ for\ exp(x)$",size=14)
bx[1].set_title(r"$cos\ coefficients\ loglog\ plot\ for\ exp(x)$",size=14)
bx[2].set_title(r"$sin\ coefficients\ semilogy\ plot\ for\ exp(x)$",size=14)
bx[3].set_title(r"$sin\ coefficients\ loglog\ plot\ for\ exp(x)$",size=14)
plt.xlabel("$n$")
bx[0].semilogy(x,np.abs(a_exp),"ro")
bx[1].loglog(x,np.abs(a_exp),"ro")
bx[2].semilogy(x[:-1],np.abs(b_exp),"ro")
bx[3].loglog(x[:-1],np.abs(b_exp),"ro")
plt.show()

# In[28]:


b_exp


# In[29]:


pylab.rcParams['figure.figsize'] = [20,15]
figure,cx = plt.subplots(4)
x= np.linspace(0,25,26)
cx[0].grid(True)
cx[1].grid(True)
cx[2].grid(True)
cx[3].grid(True)
cx[0].set_title(r"$cos\ coefficients\ semilogy\ plot\ for\ cos(cos(x))$",size=14)
cx[1].set_title(r"$cos\ coefficients\ loglog\ plot\ for\ cos(cos(x))$",size=14)
cx[2].set_title(r"$sin\ coefficients\ semilogy\ plot\ for\ cos(cos(x))$",size=14)
cx[3].set_title(r"$sin\ coefficients\ loglog\ plot\ for\ cos(cos(x))$",size=14)
plt.xlabel("$n$")
cx[0].semilogy(x,np.abs(a_cos_cos),"ro")
cx[1].loglog(x,np.abs(a_cos_cos),"ro")
cx[2].semilogy(x[:-1],np.abs(b_cos_cos),"ro")
cx[3].loglog(x[:-1],np.abs(b_cos_cos),"ro")
plt.show()

# In[30]:


x = np.linspace(0,2*pi,400)
exp1=exp(x)
A=np.zeros((400,51))
A[:,0]=1
for k in range(1,26):
    A[:,k]=np.cos(k*x)
for k in range(26,51):
    A[:,k]=np.sin(k*x)


# In[31]:


exp_c = np.linalg.lstsq(A,exp1,rcond=None)[0] #solving A*exp_c = exp


# In[32]:


x = np.linspace(0,2*pi,400)
cos_cos1=cos_cos(x)
B=np.zeros((400,51))
B[:,0]=1
for k in range(1,26):
    B[:,k]=np.cos(k*x)
for k in range(26,51):
    B[:,k]=np.sin(k*x)


# In[33]:


cos_cos_c = np.linalg.lstsq(B,cos_cos1,rcond=None)[0] #solving A*cos_cos_c = cos_cos


# In[34]:


exp_a_est = exp_c[:26]
exp_b_est = exp_c[26:]
cos_cos_a_est = cos_cos_c[:26]
cos_cos_b_est =  cos_cos_c[26:]


# In[ ]:



    
    


# In[35]:


pylab.rcParams['figure.figsize'] = [20,15]
figure,bx = plt.subplots(4)
x= np.linspace(0,25,26)
bx[0].grid(True)
bx[1].grid(True)
bx[2].grid(True)
bx[3].grid(True)
bx[0].set_title(r"$cos\ est\ coefficients\ semilogy\ plot\ for\ exp(x)$",size=14)
bx[1].set_title(r"$cos\ est\ coefficients\ loglog\ plot\ for\ exp(x)$",size=14)
bx[2].set_title(r"$sin\ est\ coefficients\ semilogy\ plot\ for\ exp(x)$",size=14)
bx[3].set_title(r"$sin\ est\ coefficients\ loglog\ plot\ for\ exp(x)$",size=14)
plt.xlabel("$n$")
bx[0].semilogy(x,np.abs(exp_a_est),"go")
bx[1].loglog(x,np.abs(exp_a_est),"go")
bx[2].semilogy(x[:-1],np.abs(exp_b_est),"go")
bx[3].loglog(x[:-1],np.abs(exp_b_est),"go")
plt.show()

# In[36]:


pylab.rcParams['figure.figsize'] = [20,15]
figure,bx = plt.subplots(4)
x= np.linspace(0,25,26)
bx[0].grid(True)
bx[1].grid(True)
bx[2].grid(True)
bx[3].grid(True)
bx[0].set_title(r"$cos\ est\ coefficients\ semilogy\ plot\ for\ cos(cos(x))$",size=14)
bx[1].set_title(r"$cos\ est\ coefficients\ loglog\ plot\ for\ cos(cos(x))$",size=14)
bx[2].set_title(r"$sin\ est\ coefficients\ semilogy\ plot\ for\ cos(cos(x))$",size=14)
bx[3].set_title(r"$sin\ est\ coefficients\ loglog\ plot\ for\ cos(cos(x))$",size=14)
plt.xlabel("$n$")
bx[0].semilogy(x,np.abs(cos_cos_a_est),"go")
bx[1].loglog(x,np.abs(cos_cos_a_est),"go")
bx[2].semilogy(x[:-1],np.abs(cos_cos_b_est),"go")
bx[3].loglog(x[:-1],np.abs(cos_cos_b_est),"go")
plt.show()

# In[37]:


print("largest deviation in exp coff"+" "+ "+" + str(np.amax(np.abs(exp_straight_coff-exp_c))))


# In[38]:


print("largest deviation in cos(cos(x)) coff"+" "+ "+" + str(np.amax(np.abs(cos_cos_straight_coff-cos_cos_c))))


# In[39]:


print(cos_cos_straight_coff)
print(cos_cos_c)


# In[40]:


print(exp_straight_coff)
print(exp_c)


# In[44]:


x = np.linspace(0,2*pi,400)
true_exp_value = make_periodic(x)
pred_exp_value = np.dot(A,exp_c)
true_cos_cos_value = cos_cos(x)
pred_cos_cos_value = np.dot(B,cos_cos_c)
figure,bx = plt.subplots(2)
bx[0].grid(True)
bx[1].grid(True)
bx[0].set_title(r"$exp(x)$",size=14)
bx[1].set_title(r"$cos(cos(x))$",size=14)
plt.xlabel(r"$x$")
bx[0].plot(x,pred_exp_value,"ro",label="exp exp")
bx[0].plot(x,true_exp_value,"k",label="True exp")
bx[0].legend()
bx[1].plot(x,pred_cos_cos_value,"ro",label="exp cos_cos")
bx[1].plot(x,true_cos_cos_value,"k",label="True cos_cos")
bx[1].legend()
plt.show()
